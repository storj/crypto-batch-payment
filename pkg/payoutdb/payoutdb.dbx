// metadata holds onto pipeline metadata
model metadata (
    table metadata
    key pk

    field pk serial64
    field created_at utimestamp (autoinsert)
    field updated_at utimestamp (autoinsert,autoupdate)

    // Version of the database
    field version int

    // The number of processing attempts
    field attempts int (updatable)

    // The spender address
    field spender text (nullable, updatable)

    // The owner address
    field owner text (nullable, updatable)
)

// payout represents a payout to a single address
model payout (
    table payout
    key pk

    field pk serial64
    field created_at utimestamp (autoinsert)

    // The line in the CSV this payout corresponds to (for auditing purposes)
    field csv_line int

    // The payee address
    field payee text

    // U.S. Dollars the payee is owed
    field usd text

    // The payout group this payout is a part of
    field payout_group_id payout_group.id restrict
)

// payout_group represents a group of one or more payouts
model payout_group (
    table payout_group
    key pk
    unique id
	index (
		fields final_tx_hash
	)

    field pk serial64
    field created_at utimestamp (autoinsert)
    field updated_at utimestamp (autoinsert,autoupdate)

    // ID of the payout group, set sequentially starting at one when the
    // payouts were broken up into groups.
    field id int64

    // Hash of the transaction that completed this payout group.
    field final_tx_hash text (nullable, updatable)
)

// transaction represents a ETH transaction associated to a payout group.
model transaction (
    table tx
    key pk
    unique hash

    field pk serial64
    field created_at utimestamp (autoinsert)
    field updated_at utimestamp (autoinsert,autoupdate)

    // Hash of the transaction
    field hash text

    // Owner address (account from which STORJ is sent)
    field owner text

    // Spender address (account that signs the transaction and pays gas)
    field spender text

    // Nonce
    field nonce uint64

    // Estimated gas price when the transaction was created
    field estimated_gas_price text

    // Price of a STORJ token in USD when the transaction was created
    field storj_price text

    // Number of STORJ token transferred by the transaction
    field storj_tokens text

    // The payout group this transaction was issued for
    field payout_group_id payout_group.id restrict

    // Raw, signed, JSON-encoded transaction data
    field raw text

    // State of the transaction
    field state text (updatable)

    // Receipt of the transaction (in JSON)
    field receipt text (nullable, updatable)
)

create payout ( noreturn )

create payout_group ( noreturn )
update payout_group (
    where payout_group.id = ?
    noreturn
)

create transaction ()
update transaction (
    where transaction.hash = ?
    noreturn
)

create metadata ( noreturn )
update metadata ( 
	where metadata.pk = ?
	noreturn
)

// load payouts in payout group
read count all (
    select payout
    where payout.payout_group_id = ?
)

// load transactions in payout group
read all (
    select transaction
    where transaction.payout_group_id = ?
)

// load payout_group by pk
read one (
    select payout_group
    where payout_group.pk = ?
) 

read all (
    select payout
)

read all (
    select payout
    join payout.payout_group_id=payout_group.id
    where payout_group.final_tx_hash = null
)

read count (
    select payout_group
)

read count (
    select payout_group
    where payout_group.final_tx_hash = null
)

read all count (
    select transaction
)

read count (
    select transaction
    where transaction.state = ?
)

read all (
    select transaction
    where transaction.state = ?
    orderby asc transaction.nonce
)

read scalar (
    select payout_group
    where payout_group.id = ?
)

read scalar (
    select transaction
    where transaction.hash = ?
)

// load metadata
read first (
    select metadata
) 

read first (
    select metadata.version
) 
